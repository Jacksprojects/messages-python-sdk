# -*- coding: utf-8 -*-

"""
messages

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from messages.api_helper import APIHelper


class Message(object):

    """Implementation of the 'Message' model.

    TODO: type model description here.

    Attributes:
        callback_url (string): URL replies and delivery reports to this
            message will be pushed to
        content (string): Content of the message
        destination_number (string): Destination number of the message
        delivery_report (bool): Request a delivery report for this message
        format (list of FormatEnum): Format of message, SMS, MMS or TTS (Text
            To Speech).
        media (list of string): TODO: type description here.
        message_expiry_timestamp (datetime): Date time after which the message
            expires and will not be sent
        metadata (object): Metadata for the message specified as a set of key
            value pairs, each key can be up to 100 characters long and each
            value can be up to 256 characters long ``` {    "myKey":
            "myValue",    "anotherKey": "anotherValue" } ```
        scheduled (datetime): Scheduled delivery date time of the message
        source_number (string): TODO: type description here.
        source_number_type (SourceNumberTypeEnum): Type of source address
            specified, this can be INTERNATIONAL, ALPHANUMERIC or SHORTCODE

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "content": 'content',
        "destination_number": 'destination_number',
        "callback_url": 'callback_url',
        "delivery_report": 'delivery_report',
        "format": 'format',
        "media": 'media',
        "message_expiry_timestamp": 'message_expiry_timestamp',
        "metadata": 'metadata',
        "scheduled": 'scheduled',
        "source_number": 'source_number',
        "source_number_type": 'source_number_type'
    }

    _optionals = [
        'callback_url',
        'delivery_report',
        'format',
        'media',
        'message_expiry_timestamp',
        'metadata',
        'scheduled',
        'source_number',
        'source_number_type',
    ]

    def __init__(self,
                 content=None,
                 destination_number=None,
                 callback_url=APIHelper.SKIP,
                 delivery_report=False,
                 format=APIHelper.SKIP,
                 media=APIHelper.SKIP,
                 message_expiry_timestamp=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 scheduled=APIHelper.SKIP,
                 source_number=APIHelper.SKIP,
                 source_number_type=APIHelper.SKIP):
        """Constructor for the Message class"""

        # Initialize members of the class
        if callback_url is not APIHelper.SKIP:
            self.callback_url = callback_url 
        self.content = content 
        self.destination_number = destination_number 
        self.delivery_report = delivery_report 
        if format is not APIHelper.SKIP:
            self.format = format 
        if media is not APIHelper.SKIP:
            self.media = media 
        if message_expiry_timestamp is not APIHelper.SKIP:
            self.message_expiry_timestamp = APIHelper.RFC3339DateTime(message_expiry_timestamp) if message_expiry_timestamp else None 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if scheduled is not APIHelper.SKIP:
            self.scheduled = APIHelper.RFC3339DateTime(scheduled) if scheduled else None 
        if source_number is not APIHelper.SKIP:
            self.source_number = source_number 
        if source_number_type is not APIHelper.SKIP:
            self.source_number_type = source_number_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        content = dictionary.get("content") if dictionary.get("content") else None
        destination_number = dictionary.get("destination_number") if dictionary.get("destination_number") else None
        callback_url = dictionary.get("callback_url") if dictionary.get("callback_url") else APIHelper.SKIP
        delivery_report = dictionary.get("delivery_report") if dictionary.get("delivery_report") else False
        format = dictionary.get("format") if dictionary.get("format") else APIHelper.SKIP
        media = dictionary.get("media") if dictionary.get("media") else APIHelper.SKIP
        message_expiry_timestamp = APIHelper.RFC3339DateTime.from_value(dictionary.get("message_expiry_timestamp")).datetime if dictionary.get("message_expiry_timestamp") else APIHelper.SKIP
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        scheduled = APIHelper.RFC3339DateTime.from_value(dictionary.get("scheduled")).datetime if dictionary.get("scheduled") else APIHelper.SKIP
        source_number = dictionary.get("source_number") if dictionary.get("source_number") else APIHelper.SKIP
        source_number_type = dictionary.get("source_number_type") if dictionary.get("source_number_type") else APIHelper.SKIP
        # Return an object of this model
        return cls(content,
                   destination_number,
                   callback_url,
                   delivery_report,
                   format,
                   media,
                   message_expiry_timestamp,
                   metadata,
                   scheduled,
                   source_number,
                   source_number_type)
